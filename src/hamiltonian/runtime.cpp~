#include "hamiltonian.cpp"

void hamiltonian::set_epsilon(double e){

  params.energy_cutoff = e;

}
void hamiltonian::run_combined_step(double dt){
  mode_cap_exceeded.fill(-1);
  psi_delta.resize(0);
  psi_delta.reserve(NUM_MODES*psi_amp.size());

  //TODO: Maybe add a threshold for number of runs where the
  //configuration has not grown. 
  bool stop = false;
  for(int i = 0; i < int( psi_amp.size()); i++){
    stop = grow_configuration_space(i);
    if(stop){
      break;
	
    }
  }
  
  merge_states();
  
  append_connections(psi_amp);
  
  evolve_space(dt);
  
  normalize_state(psi_amp);
  psi_lbl.resize(psi_amp.size());
  copy(psi_amp.begin(),psi_amp.end(),psi_lbl.begin());
  sort(psi_amp.begin(),psi_amp.end(),
       [](auto &it1,auto &it2){return norm(it1.amp) > norm(it2.amp);});
}
